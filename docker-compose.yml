  version: "3"

  services:
       mysqldb:
           image: mysql:latest
           container_name: mysql
           environment:
               - MYSQL_DATABASE=task
               - MYSQL_ROOT_HOST=%
               - MYSQL_ROOT_PASSWORD=1234
           command: ['--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci']
           ports:
              - 3306:3306
           healthcheck:
                test: [ 'CMD-SHELL', 'mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD' ]
                interval: 10s
                timeout: 2s
                retries: 100
           networks:
             - spring-network
           volumes:
             - mysql-data:/var/lib/mysql
             - ./init/:/docker-entrypoint-initdb.d
       app:
          image: kimminsic/test:task-app
          container_name: server
          build: .
          ports:
            - 8081:8081
          environment:
            SPRING_DATASOURCE_URL: jdbc:mysql://mysqldb:3306/task?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
            MYSQL_USERNAME: root
            MYSQL_PASSWORD: 1234
          restart: always
          links:
            - mysqldb
          depends_on:
            - mysqldb
          networks:
            - spring-network

  networks:
    spring-network:

  volumes:
    mysql-data:

# version: '3.8'

# services:
#   db:
#     image: mysql:latest
#     ports:
#       - 3306:3306
#     volumes:
#       - mysql-data:/var/lib/mysql
#     environment:
#       MYSQL_ROOT_PASSWORD: 1234
#       MYSQL_DATABASE: task
#     networks:
#       - spring-network
#     healthcheck:
#       test: ['CMD-SHELL', 'mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD']
#       interval: 10s
#       timeout: 2s
#       retries: 100

#   app:
#     build:
#       context: .
#       dockerfile: ./Dockerfile
#     ports:
#       - 8081:8081
#     environment:
#       MYSQL_HOST: '%'
#     depends_on:
#       db:
#         condition: service_healthy
#     networks:
#       - spring-network

# networks:
#   spring-network:

# volumes:
#   mysql-data: